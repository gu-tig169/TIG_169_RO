//import 'dart:js';
//import 'package:js';
import 'package:flutter/material.dart';
//import 'SecondView.dart';
import 'package:provider/provider.dart';

class Mystate extends ChangeNotifier{ 
  var _list = [];

  List<dynamic> get list => _list;

  void addItem(String item){
    _list.add(item);
    notifyListeners();
  }

  void removeItem(int index){
    _list.removeAt(index);
    notifyListeners();
  }
  void updateItem(int index, String newContent){
    _list[index] = newContent;
    notifyListeners();

  }

}
void main() {
  var state = Mystate();
  runApp(
    ChangeNotifierProvider(create:(context) => state,
    child:MyApp(),)
    );
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue, 
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: MyCustomForm(),
     
       
    );
  }
}

// Define a custom Form widget.
class MyCustomForm extends StatefulWidget {
  @override
  _MyCustomFormState createState() => _MyCustomFormState();
}


class _MyCustomFormState extends State<MyCustomForm> {
  // Create a text controller and use it to retrieve the current value
  // of the TextField.
  final myController = TextEditingController();
  
   
  @override
  void dispose() {
    // Clean up the controller when the widget is disposed.
    myController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      
      appBar: AppBar(
        title: Text('Todo list '),
         actions: [
           IconButton(icon: Icon( Icons.arrow_right), onPressed: (){
            Navigator.push(context, MaterialPageRoute(builder:(context) => SecondView()));
           })
         ], 
      ),
      body:
      Center(child: Consumer<Mystate>(builder: (context,state,child)=>MyList(state.list) 
    )
    ),
      bottomSheet: Padding(
        padding: const EdgeInsets.all(16.0), 
        child: TextField(
          controller: myController, 
        ),  
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
         
          Mystate state = Provider.of<Mystate>(context,listen: false);
      state.addItem(myController.text);

        },
        tooltip: 'add a ToDo',
        child: Icon(Icons.add),
      ),
      
    );
    
  }
}
Widget _todolist(){
  return Scaffold( body:
      Center(child: Consumer<Mystate>(builder: (context,state,child)=>MyList(state.list)
      
    ))
      );
}

class SecondView extends StatelessWidget {
  Widget build(BuildContext context){
    return Scaffold(
      appBar: AppBar(backgroundColor: Colors.red ),
      body:
      Center(child: Consumer<Mystate>(builder: (context,state,child)=>MyList(state.list)
      
    )
    ),floatingActionButton: _fab(context),
    );
  }
}
Widget _fab(context){
  return FloatingActionButton(
    onPressed: (){
      Mystate state = Provider.of<Mystate>(context,listen: false);
      state.addItem('new element');
      
    },
  child: Icon(Icons.add)
  );
  
}




class MyList extends StatelessWidget{
  final List <dynamic> list;


  MyList(this.list);

  Widget build(BuildContext context){
    return ListView.builder(itemBuilder: (context,index) =>_item(context,list[index],index),
    itemCount: list.length,
    );
  }

  Widget _item(context,item,index){
    return ListTile(title:Text(item.toString()),
    
    trailing: IconButton(onPressed: (){
      Provider.of<Mystate>(context,listen: false).removeItem(index);
    },
    icon: Icon(Icons.delete)
    ),onLongPress: (){
      
      
    },
    );
  }
}

